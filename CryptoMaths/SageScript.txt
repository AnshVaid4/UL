mod() #Modulus of 2 numbers
gcd() #HCF/GCD of 2 numbers
factor()  #prime factorization
list(primes()) #gives prime numbers less than n
xgcd() #Extended Euclidian x0, y0 OR multiplicative inverse in CRT u,v
crt([7,11,22],[8,17,25])  #Chinese remainder theorem ([remainder],[moduli])
euler_phi()
is_prime()
prime_pi(x)   #number of primes less than x (x/ln(x))
EllipticCurve([0,a,0,b,c])

Chinese remainder theorem
#3x=5 mod 8

k=xgcd(3,8)[1]
mod(5*k,8)



#7x=9(17)

k=xgcd(7,17)[1]
mod(9*k,17)



#11x=17(25)

k=xgcd(11,25)[1]
mod(17*k,25)

-----------------------------------------------------

###EEA extended euclidian algorithm
a=987654321
b=123456789 

def eea(a,b):
    try:
        if a%b>=0:
            print(a,'=',a//b,'*',b,'+',a%b)
            eea(b,a%b)
    except:
        exit(0)

if a>b:
    eea(a,b)
else:
    eea(b,a)

-----------------------------------------------------

#### Discrete log mod results and index(a)

a=[]
p=13
g=2
counter=0
for i in range(1,p):
    a.append((mod(g^i,p), i))
    counter+=1
    if(mod(g^i,p) ==1):
        break

if counter==euler_phi(p):
    print('g= ',g,' is primitive')
else:
    print('g= ',g,' is not primitive')

print('I(a)\t', 'a {g^k mod p}')
for i in a:
    print('I(',i[0],') =','\t',i[1],sep='')


-----------------------------------------------------

### Elgamel encryption
import random
set_random_seed(22)
p=194813
g=501
k=random_prime(10^6)  #can be any number, whether prime or not

print('p',p)
print('g',g)
print('k',k)

a=mod(g^k,p)  
print('a',mod(g^k,p))  #g and p and a are sent, k is secret key

m=192746       #message smaller than p
r=999999       #random number r
e1=mod(g^r,p)
print('e1',e1)

e2=mod(m*(a^r),p)
print('e2',e2)

e1k=mod(e1^k,p)
print(e1k)
x_gcd=xgcd(int(e1k),p)
inv=mod(x_gcd[1],p)
print('inverse of',int(e1k),' is ',inv)

print('message',mod(inv*e2,p))

---------------------------------------------------

#Check if x is a Quadratic Residue of p or not

p=37
x=58
qr=[]
for i in range(1,(p//2)+1):
    qr.append(i**2%p)
print('Quadratic residues a=x^2 mod',p,'are:',sorted(qr))

if x in qr or x%p in qr:
    print(x,'=>',x%p,'is a Quadratic Residue of',p)
else:
    print(x,'is NOT a quadratic residue of',p)

try:
    print('Legendre symbol:',legendre_symbol(x,p))
except:
    print('Jacobi symbol:',jacobi_symbol(x,p))

---------------------------------------------------

# Even powers of primitive root are Quadratic Residue

p=37
g=2
qr=[]
for i in range(1,(p//2)+1):
    try:
        print(i,(g**i%p),legendre_symbol((g**i%p),p))
    except:
        print(i,(g**i%p),jacobi_symbol((g**i%p),p))

---------------------------------------------------

#Elliptic curve addition of 2 points
E=EllipticCurve([0,17])
print(E)
plot(E)

P=E(-2,3)
Q=E(-1,4)
P+Q

---------------------------------------------------

'''
Deffie hellman key exchange algorithm, which is based on primitive roots concept

Ax: Private key of A
Bx: Private key of B

Ay: Public key of A
By: Public key of B

g is primitive root of prime number p

'''

Ax=84358759
Bx=4653788

g,p=6,61

Ay=g^Ax%p
By=g^Bx%p

'''key that is used for encryption is computed as follows by A and B. This way the key is not even exposed in internet.'''
(power_mod(By,Ax,p),power_mod(Ay,Bx,p))

---------------------------------------------------

#Finding all co-ordiantes on elliptic curve equations mod p, including point at infinity

p=5
equation=[[0,0,0,3,0],[0,0,0,3,1],[0,0,0,3,2],[0,0,0,3,3],[0,0,0,3,4]]
for i in equation:
    try:
        points=[]
        E=EllipticCurve(GF(p),i)
        for i in range(0,p):
            for j in range(0,p):
                try:
                    E(i,j)
                    points.append((i,j))
                except:
                    continue
        points.append(('OE'))
        print(len(points),'points:',points)
    except:
        print("Not possible for",i)

---------------------------------------------------

#Finding Np and ap(p defect) for elliptic curve equations
p=5
#equation=[[0,0,0,3,0],[0,0,0,3,1],[0,0,0,3,2],[0,0,0,3,3],[0,0,0,3,4]]
equation=[[0,0,0,2,0],[0,0,0,4,2],[0,0,0,1,0],[0,0,0,3,2],[0,0,0,0,1],[0,0,0,2,1],[0,0,0,4,0],[0,0,0,1,1],[0,0,0,3,0]]
for i in equation:
    try:
        print(EllipticCurve(GF(p),i))
        print('Np',1+p-(2*sqrt(p).n()),'< Np <',1+p+(2*sqrt(p).n()))
    
        sum=0
        legendre=[]
        for j in range(0,p):
            x=0
            if i[1] !=0:
                x+=i[1]*j**2
            if i[3] !=0:
                x+=i[3]*j
            if i[4] !=0:
                x+=i[4]
            x+=j**3%p
            legendre.append((x,legendre_symbol(x,p)))
            sum+=legendre_symbol(x,p)
        print('(x, legendreSymbol):',legendre)    #Substitute value of x with legendre symbol 1 in equation and get sqrt(x) to get (x,+-y)
        print('n5:',sum+1+p)
        print('p-defect:',1+p-(sum+1+p))
        print('p-defect < 2*root(p): ',1+p-(sum+1+p),'<',2*sqrt(p).n())

        print('------------------\n')
    except:
        print("Points not possible on ",i)
        print('------------------\n')

---------------------------------------------------

#Fermat factorization

n=30049
print("Square root of number: ", sqrt(n).n())
print("s,\t s_square,\t t")
for s in range(int(sqrt(n).n()),int(sqrt(n).n())*2):
    s_square=s**2
    t=sqrt(s_square-n)
    print(s,'\t',s_square,'\t\t',t.n(),end='')
    if type(t)==sage.symbolic.expression.Expression:
        print()
        continue
    else:
        print("=======> s^2-t^2: (",sqrt(s_square),'-',t,')','(',sqrt(s_square),'+',t,') =======>',sqrt(s_square)-t,'*',sqrt(s_square)+t)
        break
        

---------------------------------------------------

# Pollard's RHO factorization method
n=1357
x0=3

xk=[]
k=0
print('k\t xk \t j \t xj \t gcd(xk−xj,n)')
while k<100:
    if k==0:
        xk.append(x0)
        print(k,x0%n,'-','-','-',sep='\t')
        k+=1
        continue
    for r in range(0,200):
        if 2^r<=k and k<2^(r+1):
            break        #=================Remove it to get multiple solutions
    j=2^r-1
    x0=x0^2+1      #==================================================Change the function
    xk.append(x0%n)
    print(k,x0%n,j,xk[j],gcd(x0-xk[j],n),sep='\t')
    if gcd(x0-xk[j],n) !=1:
        print('===>',gcd(x0-xk[j],n),n/gcd(x0-xk[j],n),sep='\t')
        break
    k+=1

---------------------------------------------------

#POLLARD’S p − 1 METHOD factorization

i=0
n=1711
B=4
k=factorial(B)
print('k!=',k)
while True:
    b=power_mod(i,k,n)
    gcd_=gcd(b-1,n)
    print(i,'^',k,'%',n,'=> ',b,'||  gcd(',b,'-1,',n,') => ',gcd_)
    if gcd_ !=1 and gcd_ !=n:
        print('=====>',gcd_,n/gcd_)
        break
    i+=1

---------------------------------------------------
